// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int       @id @default(autoincrement())
  snsId     String?
  email     String?   @unique
  password  String?
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  follower  Int       @default(0)


  provider  Provider?
  Post      Post[]
  Comment   Comment[]
  // 팔로우하는 사용자 관계
  Following Follow[]  @relation("UserFollows")
  // 팔로워 관계
  Followers Follow[]  @relation("UserFollowedBy")
  Reply     Reply[]
}

model Post {
  postId    Int      @id @default(autoincrement())
  userId    Int
  title     String
  content   String
  postimg String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  like      Int      @default(0)
  view      Int      @default(0)
  postImg   String?

  Comment Comment[]

  User User @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Comment {
  commentId Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  content   String
  commentimg  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  like      Int      @default(0)
  commentId  Int      @id @default(autoincrement())
  userId     Int
  postId     Int
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  like       Int      @default(0)
  commentImg String?

  User  User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  Post  Post    @relation(fields: [postId], references: [postId], onDelete: Cascade)
  Reply Reply[]
}

model Like {
  likeId    BigInt   @id @default(autoincrement())
  userId    Int
  postId    Int?
  commentId Int?
  replyId   Int?
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@unique([userId, replyId])
}

model Follow {
  follower  Int
  following Int
  createdAt DateTime @default(now())

  // 팔로우하는 사용자
  followingUser User @relation("UserFollows", fields: [following], references: [userId])
  // 팔로워
  followerUser  User @relation("UserFollowedBy", fields: [follower], references: [userId])

  @@id([follower, following])
}

model Reply {
  replyId   Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  like      Int      @default(0)

  User    User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  Comment Comment @relation(fields: [commentId], references: [commentId], onDelete: Cascade)
}

enum Provider {
  kakao
  google
  naver
  github
  steam
  user
}
